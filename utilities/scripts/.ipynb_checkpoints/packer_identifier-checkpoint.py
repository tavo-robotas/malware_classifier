# Identify PE executable files and packer type in the sample set
# Generate packer ID values for given PE files

import os
import re
import sys
import time
import pefile
import peutils

b_packer_id_features_file = 'bening_files_packer_id_features.csv'
m_packer_id_features_file = 'malicious_files_packer_id_features.csv'
preprocessed_data_dir   = './preprocessed_data'
malicious_files_dir     = '../../data/1/'
benign_files_dir        = '../../data/0/'


def load_packer_id_map() -> dict:
    # load signature db with packer ID scalar labels and make a map.
    packer_id_map = {}
    
    with open('../db/av-packer-id-labels.csv', 'r') as avl:
        lines = avl.readlines()
        
        for i in range(1, len(lines)):
            tokens = lines[i].split(',')
            packer = tokens[0]
            if packer not in packer_id_map.keys():
                packer_id_map[packer] = int(tokens[1])
        
    return packer_id_map

def generate_sample_packer_id(files:list, source:str, outputfile:str):
    _idt = time.process_time_ns()
    _pid = os.getpid()
    
    filename     = f'{preprocessed_data_dir}/{_idt}-{_pid}-{outputfile}'
    none_pefiles = 0
    exeptions    = 0
    pefiles      = 0
    output       = []
    
    p_id_map   = load_packer_id_map()
    signatures = peutils.SignatureDatabase('../db/userdb.txt')
         
    with open(filename, 'w') as pif_file: 
        pif_file.write('NAME, PACKER_NAME, PACKER_ID, PE_IS_VALID, PE_IS_PACKED \n')
        for file in files:
            tokens    = file.split('.')
            name      = tokens[0]
            matches   = None
            packer_id = None   
            error     = None
            sign      = None
            state     = {
                'is_valid' : 0,
                'is_packed': 0
            }
            
            try:
                pe = pefile.PE(source + file, fast_load=True)
                state['is_valid'] = 1               
                try:
                    if peutils.is_probably_packed(pe):
                        state['is_packed'] = 1
                    matches = signatures.match(pe, ep_only=True)
                    sign    = matches[0]
                    if(sign in p_id_map.keys()):
                        packer_id = p_id_map[sign]                        
                    else:
                        packer_id = 0                   
                    row = f'{name},{sign},{packer_id},{state["is_valid"]},{state["is_packed"]} \n'            
                except:
                    row = f'{name},{sign},{0},{state["is_valid"]},{state["is_packed"]} \n'            
                pe.close()            
            except Exception as e:
                error = str(e).replace(',','')                  
                row   = f'{name},{error}, 0, 0, 0 \n'               
            print(f'processed: {file}')
            output.append(row)           
        if len(output) > 0:
            pif_file.writelines(output)
            output = []
        
    return
                
                
files = os.listdir(benign_files_dir)
generate_sample_packer_id(files, benign_files_dir, b_packer_id_features_file)


