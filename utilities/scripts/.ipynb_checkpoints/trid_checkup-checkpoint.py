# Generate magic signatures for malware samples
# to be used for type/id features generator.
# Using TrID program to analyse files and generate
# reports that then can be processed to generate
# file id and trid id database for later usage
# in the features engineering section

# https://mark0.net/soft-trid-e.html

import os
import re
import sys
import time
import subprocess

malicious_files_dir   = '../../data/1/'
benign_files_dir      = '../../data/0/'
preprocessed_data_dir = './preprocessed_data/trid'
filename              = '-file-id.csv'

def process_files(files:list, source:str) -> None:
    _idt = time.process_time_ns()
    _pid = os.getpid()
    
    output = []
    name   = f'{preprocessed_data_dir}/{_idt + _pid}{filename}'
    
    with open(name, 'a') as fop:
        
        for filename in files:
            filename = filename.rstrip()
            path     = source + filename
            
            if (os.path.isfile(path)):
                # https://docs.python.org/3/library/subprocess.html
                # -b display fuke type in brief mode
                signature = subprocess.check_output(['file', '-b', path])
                output.append(signature)
                
        if len(output) > 0:
            fop.writelines(output)
            output = []          
    return

def process_tr_ids(files:list, source:str, keyword:str) -> None:
    _idt = time.process_time_ns()
    _pid = os.getpid()
    
    output = []
    hsl    = ""
    name   = f'{preprocessed_data_dir}/{_idt + _pid}{filename}'
    
    with open(name, 'a') as fop:
        for filename in files:
            filename = filename.rstrip()
            path     = source + filename
            
            if (os.path.isfile(path)):
                signature  = subprocess.check_output([sample_dir, path]).decode('utf-8')
                components = signature.split('\n')
                
                for i , line in enumerate(components):
                    if line.startswith(keyword):
                        # if TrID signature dectected 
                        # the next line contains 
                        # highest probability file type
                        hsl = components[i + 1] + '\n'
                        print(f'{pid}, {filename}, {i}, {hsl} \n')
                        output.append(hsl)
                        break
                        
        if len(output) > 0:
            fop.writelines(output)
            output = []
    return

def merge_magic_reports(output:str, source:str pattern) -> None:
    
    with open(output, 'w') as fop:
        p = re.compile(pattern)
        files = os.listdir(source)
        
        for file in files:
            if p.match(file)
            with open(source + file , 'r') as fip:
                in_lines = fip.readlines()
                fip.writelines(in_lines)
    
    return

        