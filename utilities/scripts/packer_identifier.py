# Identify PE executable files and packer type in the sample set
# Generate packer ID values for given PE files

import os
import re
import sys
import pefile
import peutils

database = peutils.SignatureDatabase

PACKERSDIR = './packers_data'

def load_packer_id_map():
    # load signature db with packer ID scalar labels and make a map.
    packer_id_map = {}
    
    with open('../db/av-packer-id-labels.csv', 'r') as pil:
        in_lines = pil.readlines()
        
        for idx in range(1, len(in_lines)):
            tokens = in_lines[idx].split(',')
            packer = tokens[0]
            if packer not in packer_id_map.keys():
                parcker_id_map[packer] = int(tokens[1])
        
    return packer_id_map

def generate_sample_packer_id(path):
    
    output = []
    filepath = PACKERSDIR + + 
    with open(filepath, 'w') as fop:
        packer_id_map = load_packer_id_map()
        signatures    = database('../db/userdb.txt')
        sign          = 'unknown'
        state         = {
            'is_valid' : 0,
            'is_packed': 0
        }
        
        for idx, filename in enumarate(path):
            tokens = filename.split('_')
            curent_file_name = tokens[1]
            
            try:
                pe = pefile.PE(source + filepath, fast_load=True)
                state.is_valid = 1
                try:
                    if peutils.is_probably_packed(pe):
                        state.is_packed = 1
                    matches = signatures.match(pe, ep_only=True)
                    sign    = matches[0]
                    
                    if(sign in packer_id_map.keys()):
                        packer_id = packer_id_map[sign]
                    
                    else:
                        packer_id = 0
                    
                    row = f'{current_file_name},{sign},{packer_id)},{state.is_valid},{state.is_packed} \n'
            
                except:
                    sign = f',{sign},{0},{state.is_valid},{state.is_packed},\n'
                    row = current_file_name + sign
            
                pe.close()
            
            except Exception as e:
                error = str(e).replace(',','')
                sign  = f',{error}, 0, 0, 0 \n'
                
                row   = current_file_name + sign
                
            output.append(row)
            
        if len(output) > 0:
            fop.writelines(output)
        
        return
                
                



