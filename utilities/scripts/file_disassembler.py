# Generate a list of unpacked PE files for input and secondary function
# Read list of unpacekd PE files and using **serializer** to extract PE HEADER
# information from each binary then using IDA generate assembly code file of 
# corresponding OS architecture (32-64) bit binaries and objdump

import os
import sys
import time
import logging
import pandas as pd
import subprocess as sproc


def set_unpacked_file_list():
    pass

def get_unpacked_file_list(packers, files_ids_file, trids_file):
    
    packers_data = pd.read_csv(packers_file)
    fids_data    = pd.read_csv(file_ids_file)
    trids_data   = pd.read_csv(trids_file)
    
    
    pass

def get_pe_file_list(bit:str = '64bit'):
    pass

def disassemble_memmory_dumps(files:list):
    pass

def disassemble_pe_binaries(files:list, bit:str = '32bit'):
    '''
    dumps out all sections of the PE binary and generates assembly code.
    figure out how translate call operand target addresses to function names.
    '''
    
    _idt = time.process_time_ns()
    _pid = os.getpid()
    
    # log message
    msg = f'{_idt}:{_pid} dissasembling {files} binary PE32 files'
    # log procedure
    
    for file in files:
        path = file.rstrip()
        ASM_name = path + f'.{bit}.pe.asm'
        HDR_name = path + f'.{bit}.pe.txt'
        
        if (os.path.isfile(path)):
            with open(HDR_name, 'w') as outfile:
                cmd = ["objdump", "-g", "-x", "-D", "-s", "-t", "-T", "-M", "intel", path]
                sproc.call(cmd, stdout=outfile)  
    return
            
def extract_pe_headers(files:list):
    for file in files:
        path = file.rstrip()
        HDR_name = path + '.pe.txt'
        if (os.path.isfile(path)):
            with open(HDR_name, 'w') as outfile:
                cmd = ["objdump", "-g", "-x", path]
                sproc.call(cmd, sdout=outfile)
    return

def dislocate_asm_files(current: str, destination:str, extension:str):
    pass

def validate_dissassembly(asmfilespath: str, headerfilespath:str, extensions:str):

    asmlist = os.listdir(asmfilespath) 
    hdrlist = os.lidtdir(headerfilespath)
    
    pass

def run_dissassembler(files:list):
    pass

def run_header_extractor(files:list):
    pass

